doctype html
html(lang='en')
  head
    title Allwine Designs Arduino Compiler
    style.
      #editor { 
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
      .container {
        position: relative;
        width: 600px;
        height: 300px;
      }

  body
    button#upload.
        Upload
    div.container
      div#editor.
        // the setup function runs once when you press reset or power the board
        void setup() {
            // initialize digital pin 13 as an output.
            pinMode(13, OUTPUT);
        }

        // the loop function runs over and over again forever
        void loop() {
            digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
            delay(100);              // wait for a second
            digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
            delay(100);              // wait for a second
        }


    script(src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js")
    script(src='//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js')
    script(src='//cdnjs.cloudflare.com/ajax/libs/knockout/3.2.0/knockout-min.js')
    script(src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js")
    script.
      var editor = ace.edit("editor");
      editor.getSession().setMode("ace/mode/c_cpp");

      var info;
      var socket;
      var ports = [];

      var upload = function(hex) {
        console.log(ports.length);
        if(!ports.length) {
          setTimeout(function() { upload(hex) }, 1000);
          console.log("not ready to upload hex file... trying again in 1 second");
          return;
        }
        socket.emit('command', 'list');

        var payload = JSON.stringify({
          "board": "arduino:avr:uno",
          "port": ports[0].Name,
          "commandline": "\"{runtime.tools.avrdude.path}/bin/avrdude\" \"-C{runtime.tools.avrdude.path}/etc/avrdude.conf\" {upload.verbose}  -patmega328p -carduino -P{serial.port} -b115200 -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\"",
          "signature":"818f95e84bd149f2ad3cf82d383ca674b342f994921b34087afc6acc10b60370252fdf138a1f8e20666be623e13fdf976e4db145ded20cac7d324ae3f398093e8644f4f575bf65d988db0e9e4bd832756d54bc07b6478100c615ae49272f4b1eece680850fd8c63d772883783f4ea8e122a8e189e253c90978a6417cf4217e7c88d06fd2e470ffbad316537669b6db9b7de9709934aab3f12de5c3a2a8df30a91a84acf66487ed80cc286a50a598f855f4df4296eba07e49f054e0fec0d32b0928a68e6634cf656f41a3c663fbdf4e48b253dcfa02cc2d0826c216e4c2e979f5b43b1a2f171f75ea0fecf61b094a1896a8494eceda7899a4a02ca75d1f40790b",
          "hex": hex,
          "filename":"sketch.hex",
          "extra": {
            "auth": {
              "password":null
            },
            "wait_for_upload_port":false,
            "use_1200bps_touch":false,
            "network":false,
            "params_verbose":"-v",
            "params_quiet":"-q -q",
            "verbose":false
          }
        });
        console.log(payload);

        $.post(info.http + "/upload", payload, function(data, status) {
          console.log(data);
          console.log(status);
        });
      };

      $("#upload").click(function() {
        var args = {
          script: editor.getValue(),
          board: "arduino:avr:uno"
        };
        $.post("/compilations", args,
        function(data, status) {
          if(status == "success") {
            console.log(data);
            var getHex = function() {
              $.get(data.link, {}, function(data, status) {
                    if(status == "success") {
                      if(data.isReady) {
                          upload(data.hex);
                        console.log(data.hex);
                      } else {
                        setTimeout(getHex, 1000);
                      }
                    } else {
                      console.log("error checking link");
                    }
                });
            };
            setTimeout(getHex, 1000);
          } else {
            console.log("Error uploading");
          }
        });
      });

      var checkPort = function(port) {
            $.ajax({ url: "http://localhost:" + port + "/info" }).done(function(data) {
                info = data;
                socket = io(info.ws);
                socket.on('connect', function() {
                  socket.on('message', function(msg) {
                    try {
                      var obj = JSON.parse(msg);
                      
                      if(obj.Ports) {
                        console.log("set ports");
                        ports = obj.Ports;
                      }
                    } catch(e) {
                    }
                  });
                  socket.emit('command', 'list');
                });
                console.log(info);
            }).fail(function(err) {
              if(port < 9000) {
                  checkPort(port+1);
              }
            });
      };
      checkPort(8990);
